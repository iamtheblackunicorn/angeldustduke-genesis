---
layout: post
date_time: "2022/04/06"
description: "Blogging in Rust and why you should care using the Acid SSG. (Part I)"
title: "Blogging with Acid Part I."
show: false
isSpecial: true
tags: "static-site-generator rust programming acid cms"
---

## DISCLAIMER!!

This post is part of a special series of posts and is for a uni project. This post is experimental.

## Introduction

Hi! :) I'm glad you're here. If you've read my last post, you will know exactly what [Rust](https://www.rust-lang.org/), [Acid](https://blckunicorn.art/acid/), and [Blogging](https://dictionary.cambridge.org/de/worterbuch/englisch/blog) are. However, in this post I would like to introduce you to these three terms in such a way that you can understand each of them without any background in coding or programming.

## What is "Blogging"?

The term *"Blogging" refers to the activity of posting content of one's choosing on a *"weblog"*, or *"blog"*. These blogs usually consist of a short welcoming page that list all the blog's content and pages containing the content itself. The content is made up out of so-called *"posts"* which contain information of some kind on some topic. Before we dive into what makes up a blog, we need to understand what the web is. The internet is a network of different computers that arew interconnected and share different files. The most common filetype shared between these computers is a so-called HTML file. These are the files you see when you open a web-page in a browser. Since the web can be viewed in the brwoser, what one sees in the browser must be written in a language that the browser can understand, this language is HTML. Things are styled and made by pretty by another lamguage only the browser understands, CSS. Now blogs are basically a set of HTML files sitting on a computer somewhere and being accessible under the address that you type into your browser. The CSS files for this blog are also sitting somewhere on the same computer. The HTML files for the blog can be generated in a number of ways. Some systems, like Wordpress, let you dynamically change these HTML pages by typing something in on their various portals, others like Squarespace manage this the same way but by giving you a choice of different so-called "pre-fabricated templates" which are HTML files that determine how your page will look and then let you fill your content in on their various portals. Others, more-old-fashioned tools, let you write a bunch of text files oin some simplified form of HTML, like Markdown or RST and generate your blog from this. One of these tools is Jekyll. Jekyll does just that. It lets you write your content in Markdown form because it doesn't want to bother people with HTML and generates your web pages for your blog from these Markdown files. This blog, is, in fact, a Jekyll blog.
Programmes like Jekyll need to be written in a programming language, however! Programming languages are languages that give humans the ability to tell computers to do all sorts of things. Jekyll was written in programming language called Ruby. But what are "Rust" and "Acid"?

## What is "Rust"?

Because I was scared that Jekyll would soon fall into disuse since the language Ruby is declining sharply, I decided to write something like Jekyll but inn a different programming lanaguage. This language is Rust! What is the difference between Ruby and Rust? Let me tell you! In the field of programming there two types of programming languages. The first type are so-called "interpreted languages" and the second type are so-called "compiled languages". When you run a piece of software on your computer what happesns? The computer reads the ones and zeros stored in a software program, understands them, and executes what it sees. The execution is you seeing the calculator app calculating something when you open it on your computer. But these instructions for the computer have to be generated by someone. That someone is the software developer who writes some code that gets turned into ones and zeros for the computer. But since humans cannot understand ones and zeros we write instructions in language like Rust or Ruby that subsequently get turned into ones and zeros. Now in interpreted languages, when the developer writes code in Ruby, there is a program called an interpreter and this program reads your instructions line by line and does whatever the instructions it can see. No ones and zeros are generated from this. The interpreter does all the heavy lifting of generating ones and zeros here from the instructions written in Ruby. With Rust, a compiled language, things are different. A program called the compiler reads your instructions for the computer which you've written in Rust and *actually generates a file in which it dumps the ones and zeros*. This file is then a program that we know as a piece of software. A game, a calculator, etc.

## What is "Acid"?

Good, now we know how blogs work, how programming languages work, and how software is built. Now for the final part: You remember me mentioning that I was scared that Jekyll was going to be disused soon? And how I wrote an alternative program that works in a similar fashion to generate a blog website? Well, that program is called *Acid*. Why? I'm not sure, I felt like the *Angeldust Duke* should have a project called *Acid*, if you get my meaning. *Acid* is like Jekyll, it takes a bunch of text files which are written in a simplified form of HTML, namely markdown and generates a website from these text files. Now you might be asking: "Well, sure, but how would one style such a site?" I'm glad you asked! The styling and structuring of the HTML pages happens over so-called "templates". These templates are HTKML files with certain fields that can be filled with a user's content. Each of these fields has a name and value. The person who makes the template and decides on the styling of your blog gives the fields in the template the name and you give the field its content. Acid then tries to make sense out of all of this and generates a blog website from this. Remember, a bunch of HTML and CSS files.

## Conclusion.

So! Now you know, how the web works, what a browser is, what software is, what a programming language is, what Jekyll and Acid are, and finally what Markdown and Liquid are! Not bad! Pat yourself on the shoulder.
